#####################################################################
# nDisplay demo config file
# 
# This file demonstrates how to configure a 5 sided CAVE. The CAVE's
# area is 3x3 meters. It consist of 3 walls, floor and ceiling screens.
# The height is 2 meters.
#
# This configuration describes unwrapped CAVE. You can run it on a
# single PC.
#
# Note:
# Before use, make sure all settings correspond to your system.
#####################################################################


#####################################################################
# Config info
#******************************************************************** 
# This is a config file header.
#
# Properties:
# version - specifies the version of the configuration file (UE4.xx)
#******************************************************************** 
[info] version=22


#####################################################################
# Cluster nodes
#******************************************************************** 
# Cluster node is an application instance. It's allowed to use
# multiple instances on the same PC. Sometimes its necessary.
#
# Properties:
# id       - Unique node name
# window   - Window ID
# addr     - Network address (IPv4 only)
# master   - Specifies if current node is master; default is 'false'
# port_cs  - Cluster Synchronization port (required on master node only)
# port_ss  - Swap Synchronization port (required on master node only)
# port_ce  - Cluster Events port (required on master node only)
#
# Optional properties:
# eye_swap - Swap eyes for this node; default is 'false'
# sound    - turns on/off sound for this application instance; default is 'false'
#******************************************************************** 
# Here we have 5 cluster nodes. Each application instance renders its
# own projection(s). Master node is on the first PC.
[cluster_node] id=node_left    addr=127.0.0.1 window=wnd_left  port_cs=41001 port_ss=41002 port_ce=41003 master=true sound=true
[cluster_node] id=node_front   addr=127.0.0.1 window=wnd_front
[cluster_node] id=node_right   addr=127.0.0.1 window=wnd_right
[cluster_node] id=node_ceiling addr=127.0.0.1 window=wnd_ceiling
[cluster_node] id=node_floor   addr=127.0.0.1 window=wnd_floor


#####################################################################
# Application windows
#******************************************************************** 
# The window entitty defines properties of application's game window.
#
# Properties:
# id         - Unique window name
# fullscreen - Fullscreen or windowed mode
# winx       - X location
# winy       - Y location
# resx       - Width
# resy       - Height
# viewports  - Array of viewports
#******************************************************************** 
# Here we have 5 windows. They all run in fullscreen mode on a
# default output device with individual viewports assigned.
[window] id=wnd_left    viewports=vp_left    fullscreen=false WinX=0    WinY=300 ResX=600 ResY=400 
[window] id=wnd_front   viewports=vp_front   fullscreen=false WinX=600  WinY=300 ResX=600 ResY=400
[window] id=wnd_right   viewports=vp_right   fullscreen=false WinX=1200 WinY=300 ResX=600 ResY=400
[window] id=wnd_ceiling viewports=vp_ceiling fullscreen=false WinX=600  WinY=0   ResX=600 ResY=300
[window] id=wnd_floor   viewports=vp_floor   fullscreen=false WinX=600  WinY=700 ResX=600 ResY=600


#####################################################################
# Projection screens
#******************************************************************** 
# Projection screen is a rectangle which determines the camera frustum.
# Usually the projection screen has the same dimensions as an output
# display but in some cases it may differ.
#
# Properties:
# id     - unique projection screen name
# loc    - relative location to the parent component. Location is relative
#          to the VR root if no parent specified. The pivot is a screen's
#          center and the values are in meters.
# rot    - relative rotation to the parent component. Rotation is relative
#          to the VR root if no parent specified. The pivot is a screen's
#          center and the values are in degrees.
# size   - width (X) and height (Y) of the screen. Values are in meters.
#
# Optional properties:
# parent     - ID of parent component in VR hierarchy; default is VR root.
# tracker_id - ID of tracking device; no tracking by default.
# tracker_ch - ID of tracking device's channel; no tracking by default.
#******************************************************************** 
# We have 5 output displays. That means we have to have 5 projection
# screens. Sometimes it's possible to use only one projection screen
# (Nvidia mosaic/surround + projections with blending) but in this
# particular case each display is managed by its own PC.
[screen] id=scr_left    loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=2"   parent=display_left
[screen] id=scr_front   loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=2"   parent=display_front
[screen] id=scr_right   loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=2"   parent=display_right
[screen] id=scr_ceiling loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=1.5" parent=display_ceiling
[screen] id=scr_floor   loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=3"   parent=display_floor


#####################################################################
# Viewports
#******************************************************************** 
# Viewport is a rectangle area of game window where rendered frame is
# mapped. Usually the viewport starts at 0:0 and has the same size as
# its parent window but in some cases these settings may differ.
#
# Properties:
# id     - unique viewport name
# x      - X coordinate of viewport's top left corner
# y      - Y coordinate of viewport's top left corner
# width  - width of viewport in pixels
# height - height of viewport in pixels
#******************************************************************** 
# In this example we have different output resolutions. Let's enumerate
# correspondent viewport settings. Each viewport has its own projection
# screen.
[viewport] id=vp_left    screen=scr_left    x=0 y=0 width=600 height=400
[viewport] id=vp_front   screen=scr_front   x=0 y=0 width=600 height=400
[viewport] id=vp_right   screen=scr_right   x=0 y=0 width=600 height=400
[viewport] id=vp_ceiling screen=scr_ceiling x=0 y=0 width=600 height=300
[viewport] id=vp_floor   screen=scr_floor   x=0 y=0 width=600 height=600


#####################################################################
# Cameras
#******************************************************************** 
# Camera is a predefined point frome where the stereoscopic view built.
# It's possible to define multiple cameras and swith the active one
# during runtime. You're free to attach any camera to a tracking device
# for head tracking. Consider a camera as a viewer's head.
#
# Properties:
# id  - unique camera name
# loc - relative location to the parent component. Location is relative
#       to the VR root if no parent specified.
# rot - relative rotation to the parent component. Rotation is relative
#       to the VR root if no parent specified.
#
# Optional properties:
# parent     - ID of parent component in VR hierarchy; default is VR root.
# tracker_id - ID of tracking device; no tracking by default.
# tracker_ch - ID of tracking device's channel; no tracking by default.
#******************************************************************** 
# In this example we have only one static camera (no tracking).
[camera] id=camera_static loc="X=0,Y=0,Z=0" parent=socket_cam


#####################################################################
# Scene nodes (hierarchy transforms) 
#******************************************************************** 
# Scene node is an actor component which is basically a transformation
# matrix. Scene nodes can be helpful to build a component hierarchy, to
# define some special places (like a socket) within VR space.
#
# It might be difficult to understand what VR space origin is. Consider
# it as a point in space where VR space starts. Any componenent listed
# in this config file is relative to its parent or this origin.
#
# Properties:
# id  - unique scene node name
# loc - relative location to the parent component. Location is relative
#       to the VR root if no parent specified.
# rot - relative rotation to the parent component. Rotation is relative
#       to the VR root if no parent specified.
#
# Optional properties:
# parent     - ID of parent component in VR hierarchy; default is VR root.
# tracker_id - ID of tracking device; no tracking by default.
# tracker_ch - ID of tracking device's channel; no tracking by default.
#******************************************************************** 
# Here we build our VR hierarchy. We do it in such a way that the center
# of floor screen is in the VR space origin.
[scene_node] id=cave_origin     loc="X=0,Y=0,Z=0"      rot="P=0,Y=0,R=0"

[scene_node] id=cave_center     loc="X=0,Y=0,Z=1"      rot="P=0,Y=0,R=0"   parent=cave_origin
[scene_node] id=display_front   loc="X=1.5,Y=0,Z=0"    rot="P=0,Y=0,R=0"   parent=cave_center
[scene_node] id=display_floor   loc="X=0,Y=0,Z=-1"     rot="P=-90,Y=0,R=0" parent=cave_center

[scene_node] id=angle_left      loc="X=1.5,Y=-1.5,Z=0" rot="P=0,Y=-90,R=0" parent=cave_center
[scene_node] id=display_left    loc="X=0,Y=-1.5,Z=0"   rot="P=0,Y=0,R=0"   parent=angle_left

[scene_node] id=angle_right     loc="X=1.5,Y=1.5,Z=0"  rot="P=0,Y=90,R=0"  parent=cave_center
[scene_node] id=display_right   loc="X=0,Y=1.5,Z=0"    rot="P=0,Y=0,R=0"   parent=angle_right

[scene_node] id=angle_ceiling   loc="X=1.5,Y=0,Z=1"    rot="P=90,Y=0,R=0"  parent=cave_center
[scene_node] id=display_ceiling loc="X=0,Y=0,Z=0.75"   rot="P=0,Y=0,R=0"   parent=angle_ceiling

[scene_node] id=socket_cam      loc="X=0,Y=0,Z=1.7"    rot="P=0,Y=0,R=0"   parent=cave_origin
[scene_node] id=wand            loc="X=0,Y=0,Z=1"


#####################################################################
# Input devices
#******************************************************************** 
# Input devices are VRPN devices. The nDisplay supports the following
# types: analog, button and tracker. Many of physical input devices
# can be connected via VRPN.
#
# Properties:
# id    - nique device name
# type  - VRPN type (analog, button or tracker).
# addr  - address of a VRPN server which handles this particular device.
#         The value must match the following format: DEVICENAME@SERVER_ADDRESS
#         where DEVICENAME is a VRPN name of this device and SERVER_ADDRESS
#         is IPv4 address of VRPN server.
# loc   - relative location to the parent component. Location is relative
#         to the VR root if no parent specified.
# rot   - relative rotation to the parent component. Rotation is relative
#         to the VR root if no parent specified.
#
# front (tracker only) - mapping of a tracking system axis to X axis of VR origin
# right (tracker only) - mapping of a tracking system axis to Y axis of VR origin
# up    (tracker only) - mapping of a tracking system axis to Z axis of VR origin
# * The following values are allowed for axes mapping: X, -X, Y, -Y, Z, -Z
#
# Optional properties:
# remap - VRPN device channel remapping. Value format is: "from0:to0,from1:to1,...,fromN:toN".
#         For example: remap="0:3,1:4,5:2"
#******************************************************************** 
[input] id=MAxis     type=analog  addr=Mouse0@127.0.0.1
[input] id=MButtons  type=buttons addr=Mouse0@127.0.0.1
[input] id=KButtons  type=buttons addr=Keyboard0@127.0.0.1 


#####################################################################
# Stereoscopic settings
#******************************************************************** 
# Properties:
# eye_dist - interoccular distance in meters
[stereo] eye_dist=0.064


#####################################################################
# General settings
#******************************************************************** 
# Properties:
# swap_sync_policy - swap synchronization policy
#                  - 0 - no synchronization
#                  - 1 - software swap synchronization
#                  - 2 - NV swap lock (Nvidia cards only, OpenGL only)
[general] swap_sync_policy=1


#####################################################################
# Network settings
#******************************************************************** 
# Optional properties:
# cln_conn_tries_amount - how many times a client tries to connect to a server
# cln_conn_retry_delay  - delay before next client connection try (milliseconds)
# game_start_timeout    - timeout before all data is loaded and game started (milliseconds)
# barrier_wait_timeout  - barrier timeout for both game and render threads (milliseconds)
[network] cln_conn_tries_amount=10 cln_conn_retry_delay=1000 game_start_timeout=30000 barrier_wait_timeout=5000


#####################################################################
# Custom arguments
#******************************************************************** 
# Any custom arguments available in runtime can be specified here.
# Format:  ARG_NAME=ARG_VAL
[custom] SampleArg1=SampleVal1 SampleArg2=SampleVal2
